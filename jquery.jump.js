// Jump jQuery plugin | Spencer Tipping
// Licensed under the terms of the MIT source code license
// (Or the GPL if you prefer)

// Introduction.
// The Jump plugin adds a `jump` method to jQuery objects that gives you
// finer-grained control over document traversal. It is specifically designed to
// work with documents whose elements share context with other elements. For
// example:

// | <tr>
//     <td class='name'>a name</td>
//     <td class='address'><input></input></td>
//     <td class='email'><input></input></td>
//     <td class='controls'>
//       <button class='remove'>nuke this row</button>
//       <button class='clear'>clear this row</button>
//     </td>
//   </tr>

// Using normal jQuery, the "clear" button might be written this way:

// | $('tr button.clear').click(function (e) {
//     $(this).closest('tr').find('input').val('');
//   });

// Using jump, the same code would become this:

// | $('tr button.clear').click(function (e) {
//     $(this).jump('..tr input').val('');
//   });

//   Local `find`.
//   Jump is more useful when you have a recursive structure. For example:

//   | <div id='person-8' class='object'>
//       <div class='person'>
//         <div class='attributes'>
//           <label class='name'>Bob</label>
//         </div>
//         <div class='friends'>
//           <div class='person'>
//             <div class='attributes'>
//               <label class='name'>George</label>
//             </div>
//             <div class='friends'></div>
//           </div>
//           <div class='person'>
//             ...
//           </div>
//         </div>
//       </div>
//       <div class='controls'>
//         <button class='clear'>clear</button>
//       </div>
//     </div>

//   Let's suppose the "clear" button here is designed to clear the `name` label
//   of the outermost person, but not the `name` labels of the friends. In this
//   case:

//   | $('.object button.clear').click(function (e) {
//       $(this).jump('...object .person .attributes label').val('');
//     });

(function ($) {

// Path grammar.
// Jump supports the following identities:

// | e.jump('x y') -> e.jump('x').jump(' y')
//   e.jump('..x') -> e.closest('x')
//   e.jump('..')  -> e.parents()
//   e.jump(' x')  -> e.children('x')
//   e.jump('x')   -> e.filter('x')

// The parser may choke if you have pathological combinations of spaces and
// brackets (e.g. for jQuery attribute selectors). Also note that this parser
// fails on IE6.

  $.jumpSplit = function (path) {
    return path.match(/\s?(\S|\[[^\]]*\])+/g);
  };

  $.fn.jump = function (path) {
    var result = this;
    if (path.constructor === String) path = $.jumpSplit(path);
    for (var i = 0, l = path.length, p; i < l; ++i)
      result = /^\.\../.test(p = path[i]) ? result.closest(p.substr(2))
             : /^\.\.$/.test(p)           ? result.parents()
             : /^\s/.test(p)              ? result.children(p.substr(1))
             : /* else */                   result.filter(p);
    return result;
  };
})(jQuery);

// Generated by SDoc
